# config.py

import glob
import multiprocessing
import os
import sys


class PyCMTensorConfig:
    """Object that holds the configuration settings."""

    def __init__(self):
        self._pycmtensor_dict = {}
        self["PATIENCE"] = 20000
        self["PATIENCE_INCREASE"] = 2
        self["VALIDATION_FREQUENCY"] = 10000
        self["VALIDATION_THRESHOLD"] = 1.003
        self["SEED"] = 999
        self["MAX_EPOCH"] = 2000
        self["CWD"] = os.getcwd()
        self["PROCESSOR_IDENTIFIER"] = os.environ["PROCESSOR_IDENTIFIER"]
        self["PYTHON_VERSION"] = sys.version

    def __getitem__(self, item):
        return self._pycmtensor_dict[item]

    def __setitem__(self, key, val):
        if key == "SEED":
            assert (val >= 0) and (
                val < 65536
            ), f"Seed value must be between 0 and 65535"
        self._pycmtensor_dict[key] = val

    def __getstate__(self):
        return self.__dict__

    def __setstate__(self, state):
        self.__dict__.update(state)

    def __repr__(self):
        return f"{self._pycmtensor_dict}"

    def generate_config_file(self):
        aesararc_dir = os.path.expanduser("~")
        ld_dir = os.path.join(os.getenv("CONDA_PREFIX"), "Library", "bin")
        mkt_rt_files = glob.glob(os.path.join(ld_dir, "mkl_rt*"))
        if len(mkt_rt_files) > 0:
            mkl_rt_flag = os.path.basename(mkt_rt_files[-1])
            if mkl_rt_flag.endswith(".dll"):
                mkl_rt_flag = mkl_rt_flag[:-4]
        else:
            mkl_rt_flag = ""

        with open(os.path.join(aesararc_dir, ".aesararc"), "w") as f:
            f.write(
                "# Autogenerated by PyCMTensor\n\n"
                f"[blas]\nldflags = -L{ld_dir} -l{mkl_rt_flag}"
            )

        self["LD_DIR"] = ld_dir
        self["MKL_RT_FLAG"] = mkl_rt_flag

    def set_num_threads(self):
        num_cores = multiprocessing.cpu_count()
        os.environ["MKL_NUM_THREADS"] = str(num_cores)
        os.environ["OMP_NUM_THREADS"] = str(num_cores)

        self["MKL_NUM_THREADS"] = num_cores
        self["OMP_NUM_THREADS"] = num_cores
